                    Spring usa hibernate por defecto para trabajar con JPA

--------------------------------------------------------------------------------------------------------------

El paquete "com.platzi.piza.persistence" es donde vamos a guardar td la info de la bd
        En el paquete persistence, vamos a generar otros 2 paquetes para poner los repositorios y entidades
            "com.platzi.piza.persistence.entity" - Para las entidades
            "com.platzi.piza.persistence.repository" - Para los repositorios

el paquete "com.platzi.piza.service" es para incluir nuestros servicios

el paquete"com.platzi.piza.webb.controller" es donde tendremos nuestros controladores

--------------------------------------------------------------------------------------------------------------

En la clase "application.properties", lo primero que hacemos es conectar a la base de datos de MYSQL

En esta clase, a la hora de decile que tipo de relacion va a tener la api con la bd tenemos:
                (create - Crea el esquema de la bd y destruye td lo que esté guardado
                 update - Crea lo que necesite en el esquema, pero no elimina lo que ya tenemos guardado
                 create-drop - Crea y destruye el esqema cuando se cierra sesion en la app
                 none - Solo mueve la info de la bd
                 validate - No hace ninguna cambio estructural, solo valida si la bd es valida o no)

--------------------------------------------------------------------------------------------------------------

                                CREACION DE LOS ENTITIES CON JPA
En las clases que se quieren mapear a la base de datos, lo primero que hay que hacer es poner la notacion
 "@Entity" - Para indicar que va a ser una tabla de la base de datos

Tambien podemos usar las notaciones "@Getter  @Setter  @NoArgsConstructor" para autogenerar los Getters,
 los Setters y el constructor vacio que necesita hibernate sin tener que escribir el codigo

En caso de que exista una relacion con 1 PK compuesta, hay que crear una clase que contenga las PK
        y luego usar la notacion "@EmbeddedId" para indicar que es una PK compuesta
        y "@MapsId" para indicar que es una relacion con otra tabla
                             (Por ejemplo, en la clase OrderItemEntity)

--------------------------------------------------------------------------------------------------------------

                                        CREACION DE RELACIONES
Las relaciones entre las tablas se hacen con las anotaciones de JPA
        @OneToMany - Relacion uno a muchos
        @ManyToOne - Relacion muchos a uno
        @ManyToMany - Relacion muchos a muchos
        @OneToOne - Relacion uno a uno

Una vez puestos los tipo de Relacion, en la anotacion @JoinColumn, hay que indicar
 a que columna se hace refencia.
 Por ejemplo - en la clase OrderItemEntity, la columna "id_order" hace referencia a la tabla "order"
        y la columna "pizza_id" hace referencia a la tabla "pizza". Esto se le indica en el atributo
        pizza de la clase OrderItemEntity, que es de tipo PizzaEntity(en el JoinColumn le indicamos
        primero el nombre de la columna de la tabla en la que estamos, y luego el nombre de la columna a
        al que se hace referencia)

--------------------------------------------------------------------------------------------------------------

                                           CONSULTAS
Pasos una vez creadas tods las clases necesarias para hacer las consultas:
        1. Le indicamos a la interfaz Repository que va a extender de ListCrudRepository
        2. Creamos los metodos en la Interfaz para obtener la info que queremos de la bd(los que no vienen por defecto)
           (Por ejemplo, en la clase PizzaRepository, creamos el metodo findByAvailableFalse para buscar las no diponible)
        3. En la clase service, creamos una instancia de la interfaz Repository para utilizar los metodos
           Una vez tenemos la instancia, podemos usar los metodos de la interfaz Repository
        4. En la clase controller, creamos una instancia de la clase service para utilizar los metodos
           Una vez tenemos la instancia, podemos usar los metodos de la clase service

 -> ¿PORQUE es mejor tener una clase "service" para llamar a los metodos de la clase PizzaRepository y luego desde
 el controller llamar a los metodos de la calse service?
        Separación de responsabilidades: La capa de servicio permite separar la lógica de negocio de la lógica de
        acceso a datos. Esto hace que el código sea más modular y fácil de mantener.

        Reutilización de código: La lógica de negocio encapsulada en la capa de servicio puede ser reutilizada por
        diferentes controladores o incluso por otros servicios.

        Facilidad de prueba: Las clases de servicio pueden ser probadas de manera independiente utilizando pruebas
        unitarias. Esto facilita la detección de errores y mejora la calidad del código.

        Abstracción: La capa de servicio actúa como una abstracción sobre la capa de acceso a datos. Esto permite
        cambiar la implementación de la capa de acceso a datos sin afectar a los controladores.

        Manejo de transacciones: La capa de servicio es un buen lugar para manejar transacciones, asegurando que las
        operaciones de base de datos se realicen de manera atómica.

        Seguridad: La lógica de seguridad y validación de datos puede ser centralizada en la capa de servicio,
        asegurando que todas las operaciones pasen por las mismas verificaciones.

--------------------------------------------------------------------------------------------------------------

                                                QUERY METHODS
Los Query Methods en Spring Data JPA permiten definir consultas utilizando el nombre del método en las interfaces
de repositorio. El nombre del método sigue una convención que indica a JPA cómo construir la consulta.
Esto facilita la creación de consultas sin necesidad de escribir SQL explícito.

    POR EJEMPLO -> En la Interfaz PizzaRepository, cree un metodo "findByAvailableFalse" para buscar las pizzas que
    no están disponibles.
